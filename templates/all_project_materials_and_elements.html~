{% extends 'base.html' %}

{% block title %}All Project Materials and Elements{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1 class="text-center mb-4">All Project Materials and Elements</h1>

    <form method="post" id="update-prices-form">
        {% csrf_token %}
        {% for element in elements %}
            <div class="card mb-4" id="element_{{ element.id }}">
                <div class="card-header">
                    <h2 class="mb-0">{{ element.name }}</h2>
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        {% for material in element.materials.all %}
                            <li class="list-group-item">
                                <div class="row align-items-center">
                                    <div class="col-md-4">
                                        <strong>{{ material.name }}</strong>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="material_price_{{ material.id }}">Material Price:</label>
                                            <input type="number" step="0.01" name="material_price_{{ material.id }}" id="material_price_{{ material.id }}" class="form-control" value="{{ material.price }}">
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="material_markup_{{ material.id }}">Markup %:</label>
                                            <input type="number" step="0.01" name="material_markup_{{ material.id }}" id="material_markup_{{ material.id }}" class="form-control" value="0">
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <strong>Total Cost: <span id="total_cost_material_{{ material.id }}">{{ material.price }}</span></strong>
                                    </div>
                                </div>
                            </li>
                        {% empty %}
                            <li class="list-group-item">No materials found for this element.</li>
                        {% endfor %}
                    </ul>
                </div>
                <div class="card-footer text-center">
                    <button type="button" class="btn btn-success" onclick="updatePrices('{{ element.id }}')">Update Prices for {{ element.name }}</button>
                </div>
            </div>
        {% empty %}
            <div class="alert alert-warning">No project elements found.</div>
        {% endfor %}
        <button type="button" class="btn btn-primary" onclick="updateAllPrices()">Update All Prices</button>
    </form>
</div>

<script>
    // Function to compute total costs for materials when prices or markups change
    document.querySelectorAll('input[type="number"]').forEach(input => {
        input.addEventListener('input', function() {
            const materialId = this.id.split('_')[2]; // Get the material ID
            const materialPrice = parseFloat(document.getElementById(`material_price_${materialId}`).value) || 0;
            const materialMarkup = parseFloat(document.getElementById(`material_markup_${materialId}`).value) || 0;

            // Calculate total cost including markup
            const totalCost = materialPrice + (materialPrice * (materialMarkup / 100));
            document.getElementById(`total_cost_material_${materialId}`).textContent = totalCost.toFixed(2);
        });
    });

    function updatePrices(elementId) {
        const prices = [];
        const markups = [];

        // Collect the prices and markups for the specific element
        document.querySelectorAll(`#element_${elementId} input[name^='material_price_'], #element_${elementId} input[name^='material_markup_']`).forEach(input => {
            const materialId = input.name.split('_')[2]; // Get the material ID
            if (input.name.startsWith(`material_price_`)) {
                const price = parseFloat(input.value) || 0;
                prices.push({ materialId, price });
            } else if (input.name.startsWith(`material_markup_`)) {
                const markup = parseFloat(input.value) || 0;
                markups.push({ materialId, markup });
            }
        });

        // Send the updated prices and markups to the backend
        fetch(`/update-prices/${elementId}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': '{{ csrf_token }}'  // Add CSRF token for security
            },
            body: JSON.stringify({ prices, markups })
        })
        .then(response => {
            if (response.ok) {
                alert(`Prices updated successfully for element: ${elementId}!`);
                location.reload();  // Reload the page to see the updated prices
            } else {
                alert('Failed to update prices.');
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function updateAllPrices() {
        const prices = [];
        const markups = [];

        // Collect all prices and markups from the form
        document.querySelectorAll('input[name^="material_price_"], input[name^="material_markup_"]').forEach(input => {
            const materialId = input.name.split('_')[2]; // Get the material ID
            if (input.name.startsWith(`material_price_`)) {
                const price = parseFloat(input.value) || 0;
                prices.push({ materialId, price });
            } else if (input.name.startsWith(`material_markup_`)) {
                const markup = parseFloat(input.value) || 0;
                markups.push({ materialId, markup });
            }
        });

        // Send the updated prices and markups to the backend
        fetch('/update-prices/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': '{{ csrf_token }}'  // Add CSRF token for security
            },
            body: JSON.stringify({ prices, markups })
        })
        .then(response => {
            if (response.ok) {
                alert('All prices updated successfully!');
                location.reload();  // Reload the page to see the updated prices
            } else {
                alert('Failed to update prices.');
            }
        })
        .catch(error => console.error('Error:', error));
    }
</script>
{% endblock %}
